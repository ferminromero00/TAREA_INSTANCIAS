name: Deploy to AWS

on:
  push:
    branches:
      - main  # Ejecutar el flujo cuando haya commits en la rama principal

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      TERRAFORM_VERSION: 1.9.7

    steps:
      # Checkout del repositorio
      - name: Check out code
        uses: actions/checkout@v2

      # Instalar Node.js
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'  # Ajusta la versi칩n de Node.js si es necesario

      # Instalar JSDoc
      - name: Install JSDoc
        run: npm install -g jsdoc  # Instala JSDoc globalmente

      # Generar la documentaci칩n con JSDoc
      - name: Generate JSDoc documentation
        run: jsdoc Web/js/index.js -d Web/docs  # Genera la documentaci칩n en Web/docs

      # Crear archivo ZIP del proyecto
      - name: Create ZIP file
        run: |
          sudo apt-get update
          sudo apt-get install -y zip
          cd Web  # Cambia a la carpeta donde est치n los archivos que deseas comprimir
          zip -r project.zip .  # Crea un ZIP de todo el contenido en la carpeta actual

      # Configurar las credenciales de AWS
      - name: Configure AWS Credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" >> ~/.aws/credentials

      # Iniciar Terraformd
      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      # Hacer un plan de Terraformd
      - name: Terraform Plan
        run: terraform plan -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}"
        working-directory: terraform

       #Aplicar los cambios de Terraform
      #- name: Terraform Apply
        #run: terraform apply -auto-approve -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}"
        #working-directory: terraform

      # Opcional: Destruir los recursos de Terraform
      #- name: Terraform Destroy
        #run: terraform destroy -auto-approve -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}"
        #working-directory: terraform
